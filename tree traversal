
#include <bits/stdc++.h>

using namespace std;
struct node{
    int key;
    node *left;
    node *right;
node(int k){
    key=k;
    left=right=NULL;
}
};
void linebytrav(node *root){
    if(root==NULL){
        return;
    }
    std::queue<node *>q ;
    q.push(root);
    q.push(NULL);
    while(q.size()>1){
        node *curr=q.front();
        q.pop();
        if(curr==NULL){
            cout<<endl;
            q.push(NULL);
            continue;
        }
        cout<<curr->key<<" ";
        if(curr->left!=NULL){
             q.push(curr->left); 
        }
        if(curr->right!=NULL){
            q.push(curr->right);
        }
        
    }
}
void trvameth(node *root){
    if(root==NULL){
        return;
    }
    queue<node*>q;
    q.push(root);
    while(q.empty()==false){
        int count=q.size();
        for(int i=0;i<count;i++){
         node *curr=q.front();
         q.pop();
        cout<<curr->key<<" ";
        if(curr->left!=NULL){
            q.push(curr->left);
        }
        if(curr->right!=NULL){
            q.push(curr->right);
        }
            
        }
        cout<<endl;
    }
}
int main()
{
    node *root=new node(100);
    root->left=new node(200);
    root->right=new node(300);
    root->left->left=new node(400);
    root->left->right=new node(500);
    root->right->left=new node(600);
    root->right->right=new node(700);
    root->left->left->left=new node(800);
    root->left->left->right=new node(900);
    linebytrav(root);
    cout<<"\n method"<<endl;
    trvameth(root);
    return 0;
}
